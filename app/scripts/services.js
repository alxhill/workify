// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var Todos;

  angular.module('workify').service('Todos', Todos = (function() {
    function Todos($q, $rootScope) {
      this.$q = $q;
      this.$rootScope = $rootScope;
      this.reset();
      this.loaded = false;
    }

    Todos.prototype.reset = function() {
      return this.qTodolists = this.$q.defer();
    };

    Todos.prototype.get = function() {
      var _this = this;
      if (this.loaded) {
        this.reset();
      }
      chrome.storage.local.get('todolist', function(_arg) {
        var newTodolist, todolist;
        todolist = _arg.todolist;
        if (todolist != null) {
          _this.$rootScope.$apply(function() {
            return _this.qTodolists.resolve(todolist);
          });
        } else {
          newTodolist = {
            high: [],
            low: []
          };
          _this.$rootScope.$apply(function() {
            return _this.qTodolists.resolve(newTodolist);
          });
          _this.update(newTodolist);
        }
        return _this.loaded = true;
      });
      return this.qTodolists.promise;
    };

    Todos.prototype._update = function(todolist) {
      chrome.storage.local.set({
        todolist: todolist
      });
      return chrome.runtime.sendMessage("updateList");
    };

    Todos.prototype.update = function(todolists) {
      var _this = this;
      if (todolists != null) {
        return this._update(todolists);
      } else {
        return this.qTodolists.promise.then(function(todolists) {
          return _this._update(todolists);
        });
      }
    };

    Todos.prototype.add = function(title, energy) {
      var _this = this;
      return this.qTodolists.promise.then(function(todolists) {
        return _this._getNextId().then(function(nextId) {
          var todo;
          todo = {
            id: nextId,
            title: title
          };
          todolists[energy].push(todo);
          return _this.update(todolists);
        });
      });
    };

    Todos.prototype.remove = function(id) {
      var _this = this;
      return this.qTodolists.promise.then(function(todolists) {
        var energy, todo, todolist, _i, _len;
        console.log(todolists);
        for (energy in todolists) {
          todolist = todolists[energy];
          for (_i = 0, _len = todolist.length; _i < _len; _i++) {
            todo = todolist[_i];
            console.log(todo.id, id);
            if (todo.id === id) {
              todolist.splice(todolist.indexOf(todo), 1);
              break;
            }
          }
        }
        return _this.update(todolist);
      });
    };

    Todos.prototype._getNextId = function() {
      var qId;
      qId = this.$q.defer();
      this.qTodolists.promise.then(function(todolists) {
        var todos;
        todos = _(todolists).values().flatten().value();
        if (todos.length !== 0) {
          return qId.resolve(0);
        } else {
          return qId.resolve(1 + _.max(todos, "id").id);
        }
      });
      return qId.promise;
    };

    return Todos;

  })());

}).call(this);
